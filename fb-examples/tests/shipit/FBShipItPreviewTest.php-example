<?hh
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 * @format
 */

/**
 * This file was moved from fbsource to www. View old history in diffusion:
 * https://fburl.com/rylz5y0y
 */
namespace Facebook\ShipIt;

use namespace HH\Lib\C; // @oss-enable


<<\Oncalls('open_source')>>
final class FBShipItPreviewTest extends FBBaseTest {

  private static function makeChangeset(): ShipItChangeset {
    return (new ShipItChangeset())
      ->withID('deadbeef')
      ->withTimestamp(12345)
      ->withAuthor('yrahbar')
      ->withSubject('Test Commit')
      ->withMessage("Summary:\n Stuff")
      ->withDiffs(vec[
        shape(
          'path' => 'public/example.php',
          'body' => 'Testing events from GitHub author date\n',
        ),
        shape(
          'path' => 'facebook/filtered.txt',
          'body' => 'Testing events from GitHub author date\n',
        ),
      ]);
  }

  public async function testHandleChangeset(): Awaitable<void> {
    $changeset = self::makeChangeset();
    $result = await (new FBShipItPreview())
      ->genHandleChangeset('phabtest1_git', 'side_branch', $changeset, null);
    \expect(1)->toEqual(C\count($result));
    \expect(
      (new ShipItChangeset())->withID('deadbeef')
        ->withTimestamp(12345)
        ->withAuthor('yrahbar')
        ->withSubject('Test Commit')
        ->withMessage('Summary: Stuff')
        ->withDiffs(vec[
          shape(
            'path' => 'public/example.php',
            'body' => 'Testing events from GitHub author date\\n',
          ),
        ])
        ->withDebugMessage(
          'STRIP FILE: "facebook/filtered.txt" matches pattern "@^facebook[/|$]@"',
        ),
    )->toBePHPEqual($result[0]['changeset']);
    \expect('facebook')->toEqual($result[0]['githubOrg']);
    \expect('phabtest1_git')->toEqual($result[0]['githubProject']);
    \expect("Test Commit\n\nSummary: Stuff")
      ->toEqual($result[0]['commitMessage']);
    \expect(null)->toEqual($result[0]['patch']);
  }

  public async function testHandleFullPatch(): Awaitable<void> {
    $changeset = self::makeChangeset();
    // Actual Phabricator git-style raw patch of an fbsource diff
    $patch = \file_get_contents(__DIR__.'/example_www_git_diff.patch');
    $result = await (new FBShipItPreview())
      ->genHandleChangeset('facebook-www', 'master', $changeset, $patch);
    \expect($result[0]['patch'])
      ->toEqual(
        \file_get_contents(__DIR__.'/example_fbshipit_git_diff.patch'),
      );
    $diffs = $result[0]['changeset']->getDiffs();
    \expect(C\count($diffs))->toEqual(2);
    \expect($diffs[0]['path'])
      ->toEqual(
        'fb-examples/tests/shipit/FBCommonFiltersTest.php-example',
      );
    \expect($diffs[1]['path'])
      ->toEqual('fb-examples/lib/shipit/FBCommonFilters.php-example');
    \expect(null)->toEqual($result[0]['error']);
  }

  public async function testHandleRenames(): Awaitable<void> {
    $changeset = self::makeChangeset()->withDiffs(vec[
      shape(
        'path' =>
          'from flib/intern/opensource/shipit/src/shipit/fb-private/file.php',
        'body' => '_',
      ),
      shape(
        'path' => 'flib/intern/opensource/shipit/src/shipit/file.php',
        'body' => '_',
      ),
    ]);
    $patch = \file_get_contents(__DIR__.'/example_rename_git_diff.patch');
    $result = await (new FBShipItPreview())
      ->genHandleChangeset('facebook-www', 'master', $changeset, $patch);
    $error = $result[0]['error'];
    invariant($error !== null, 'Expected error');
    \expect($error)->toContainSubstring('This patch contains renamed');
    $diffs = $result[0]['changeset']->getDiffs();
    \expect(C\count($diffs))->toEqual(1);
    \expect('src/shipit/file.php')->toEqual($diffs[0]['path']);
  }
}
