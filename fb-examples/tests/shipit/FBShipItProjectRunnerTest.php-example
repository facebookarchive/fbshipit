<?hh
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 * @format
 */

/**
 * This file was moved from fbsource to www. View old history in diffusion:
 * https://fburl.com/z8axydvl
 */
namespace Facebook\ShipIt;

use type Facebook\ImportIt\FBImportItBranchResolutionPhase;

<<\Oncalls('open_source')>>
final class FBShipItProjectRunnerTest extends FBBaseTest {

  private static function getPhases(
    FBShipItCLIAction $action,
    FBShipItConfig $config_object,
    ?string $external_branch = null,
    ?IShipItArgumentParser $argument_parser = null,
  ): vec<ShipItPhase> {
    return FBShipItProjectRunner::getPhases(
      $action,
      $config_object,
      $external_branch,
      $argument_parser,
    );
  }

  public async function testGetPhasesNoBranch(): Awaitable<void> {
    $phase =
      self::getPhases(FBShipItCLIAction::SHIP_IT, self::getConfigObject())[0];
    invariant(
      $phase is FBShipItBranchResolutionPhase,
      'Unexpected phase type: %s',
      \get_class($phase),
    );
    \expect($phase)->toNotBeInstanceOf(FBImportItBranchResolutionPhase::class);
    $branches = await $phase->genBranchConfigs();
    \expect(C\count($branches))->toEqual(2);
  }

  public async function testGetPhasesWithBranch(): Awaitable<void> {
    $phase = self::getPhases(
      FBShipItCLIAction::SHIP_IT,
      self::getConfigObject(),
      'side_branch',
    )[0];
    invariant(
      $phase is FBShipItBranchResolutionPhase,
      'Unexpected phase type: %s',
      \get_class($phase),
    );
    \expect($phase)->toNotBeInstanceOf(FBImportItBranchResolutionPhase::class);
    $branches = await $phase->genBranchConfigs();
    \expect(C\count($branches))->toEqual(1);
    \expect($branches[0]->getInternalBranch())->toEqual('side_branch');
  }

  public async function testGetPhasesImportIt(): Awaitable<void> {
    $phase = self::getPhases(
      FBShipItCLIAction::IMPORT_IT,
      self::getConfigObject(),
      'master',
    )[0];
    invariant(
      $phase is FBImportItBranchResolutionPhase,
      'Unexpected phase type: %s',
      \get_class($phase),
    );
    \expect($phase)->toBeInstanceOf(FBImportItBranchResolutionPhase::class);
    $branches = await $phase->genBranchConfigs();
    \expect(C\count($branches))->toEqual(1);
    \expect($branches[0]->getInternalBranch())->toEqual('master');
  }

  public async function testGetPhasesImportItRequiresBranch(): Awaitable<void> {
    $phase =
      self::getPhases(FBShipItCLIAction::IMPORT_IT, self::getConfigObject())[0];
    invariant(
      $phase is FBImportItBranchResolutionPhase,
      'Unexpected phase type: %s',
      \get_class($phase),
    );
    \expect($phase)->toBeInstanceOf(FBImportItBranchResolutionPhase::class);
    \expect(async () ==> await $phase->genBranchConfigs())
      // @oss-disable: ->toThrow(\InvariantViolationException::class);
    ->toThrow(InvariantException::class); // @oss-enable
  }

  private static function getConfigObject(): FBShipItConfig {
    return \Facebook\ShipIt\FBShipItConfigRegistry::getInstanceForTesting();
  }
}
